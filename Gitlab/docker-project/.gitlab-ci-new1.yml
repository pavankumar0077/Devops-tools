stages:
  - build
  - test
  - deploy

default:
  image: docker:latest
  services: 
    - docker:dind
variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""

# Build the Docker image
build_docker_image:
  stage: build
  before_script:
    - docker version
  script:
    - echo "Building the project..."
    - docker login registry.gitlab.com -u pavan0077 -p $TOKEN 
    - docker build -t registry.gitlab.com/pavan7521241/webapp-docker:$CI_PIPELINE_IID .
    - docker push registry.gitlab.com/pavan7521241/webapp-docker:$CI_PIPELINE_IID
  artifacts:
    paths:
      - $CI_PROJECT_DIR/
    exclude:
      - Dockerfile
  allow_failure: true  # Allows the pipeline to continue even if this stage fails

# Test the Docker image
test_docker_image:
  stage: test
  script:
    - echo "Testing the project..."
    - docker login registry.gitlab.com -u pavan0077 -p $TOKEN 
    - docker pull registry.gitlab.com/pavan7521241/webapp-docker:$CI_PIPELINE_IID
    - docker image ls
  allow_failure: true  # Allows the pipeline to continue even if this stage fails

# Deploy and run the Docker image in the dev environment
deploy_to_dev:
  stage: deploy
  environment:
    name: dev
  script:
    - echo "Deploying and running the Docker container in dev..."
    - docker login registry.gitlab.com -u pavan0077 -p $TOKEN
    - docker pull registry.gitlab.com/pavan7521241/webapp-docker:$CI_PIPELINE_IID
    
    # Stop any running container
    - docker stop dev-container || true
    - docker rm dev-container || true
    
    # Run the Docker container
    - docker run -d --name dev-container -p 8080:80 registry.gitlab.com/pavan7521241/webapp-docker:$CI_PIPELINE_IID
    
    # Test if the application is running within the container
    - docker exec dev-container curl -f http://localhost:80 || echo "App is not running"
    
    # Optionally, check the running container
    - docker ps | grep dev-container

